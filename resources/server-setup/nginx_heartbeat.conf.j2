# This server block handles heartbeat requests sent directly to the VPS IP address.
# It also requires a default SSL certificate to be configured. For simplicity,
# this example assumes a self-signed cert or one for your primary domain exists.
# Your Ansible playbook should handle creating a default certificate.

server {
    listen 443 ssl default_server;
    server_name _;

    # IMPORTANT: Replace these with paths to a default or self-signed certificate
    # that your Ansible playbook manages.
    ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
    ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

    # This is the main heartbeat endpoint
    location = /heartbeat {
        # Security Check: Ensure the secret key from the Ansible Vault matches
        if ($http_x_secret_key != "{{ heartbeat_secret_key }}") {
            return 403;
        }

        # Use Lua to handle the request, caching, and JSON response
        content_by_lua_block {
            local cache_file = "/var/www/heartbeats/cache.json"
            local cache_ttl = 60 -- seconds

            local file = io.open(cache_file, "r")
            local last_modified = 0
            if file then
                local stat = file:stat()
                file:close()
                if stat then
                    last_modified = stat.mtime
                end
            end
            
            if (os.time() - last_modified) > cache_ttl then
                -- Cache is stale, regenerate the data
                local handle_load = io.popen("cat /proc/loadavg | awk '{print $1}'")
                local cpu_load = handle_load:read("*a"):gsub("[\r\n]", "")
                handle_load:close()

                local handle_disk = io.popen("df -h / | awk 'NR==2 {print $5}'")
                local disk_usage = handle_disk:read("*a"):gsub("[\r\n]", "")
                handle_disk:close()
                
                local health_data = string.format(
                    '{"status": "ok", "cpu_load_1m": "%s", "disk_usage": "%s", "timestamp": %d}',
                    cpu_load, disk_usage, os.time()
                )

                -- Write to the cache file
                local file_w = io.open(cache_file, "w")
                if file_w then
                    file_w:write(health_data)
                    file_w:close()
                end
                
                ngx.header.content_type = "application/json"
                ngx.print(health_data)
            else
                -- Cache is fresh, serve the cached file
                ngx.header.content_type = "application/json"
                ngx.exec("/__serve_cache")
            end
        }
    }
    
    # Internal location to serve the cached file
    location = /__serve_cache {
        internal;
        alias /var/www/heartbeats/cache.json;
    }

    # Location for the client-specific heartbeat "touch"
    location ~ ^/heartbeats/([a-zA-Z0-9-]+)\.heartbeat$ {
        internal; # Can only be accessed from within Nginx
    }

    location @touch_heartbeat {
        internal;

        if ($http_x_secret_key != "{{ heartbeat_secret_key }}") {
            return 204; # Silently do nothing
        }

        content_by_lua_block {
            local client_id = ngx.req.get_headers()["X-Client-ID"]
            if client_id and client_id:match("^[a-zA-Z0-9-]+$") then
                -- 'touch' the file
                local file = io.open("/var/www/heartbeats/" .. client_id .. ".heartbeat", "w")
                if file then
                    file:write(os.time())
                    file:close()
                end
            end
            ngx.exit(204)
        }
    }
}
